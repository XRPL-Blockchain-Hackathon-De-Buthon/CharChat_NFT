
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { ArrowLeft, Edit, MessageSquare, Save, Users, Clock, Send } from "lucide-react";
import { toast } from "sonner";
import ChatbotAnalytics from "@/components/ChatbotAnalytics";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";

// Mock chart data
const generateChartData = (points: number = 30, min: number = 50, max: number = 150) => {
  return Array.from({ length: points }, (_, i) => ({
    name: `Day ${i + 1}`,
    price: parseFloat((Math.random() * (max - min) + min).toFixed(2))
  }));
};

// Mock chatbot details
const mockChatbotDetails = {
  "1": {
    id: "1",
    name: "Personal Assistant",
    image: "https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1061&q=80",
    tokenPrice: 0.45,
    priceChange: 5.2,
    monthlyRevenue: 0.08,
    totalRevenue: 0.45,
    userCount: 2150,
    avgSessionTime: 8,
    messagesPerDay: 3200,
    systemPrompt: "You are a helpful personal assistant. You can help with scheduling, reminders, and answering questions. You are friendly, professional, and efficient. You always try to provide accurate information and when you don't know something, you admit it."
  },
  "2": {
    id: "2",
    name: "Fantasy Guide",
    image: "https://images.unsplash.com/photo-1590086782957-93c06ef21604?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=774&q=80",
    tokenPrice: 0.32,
    priceChange: -1.8,
    monthlyRevenue: 0.05,
    totalRevenue: 0.28,
    userCount: 1580,
    avgSessionTime: 6,
    messagesPerDay: 2400,
    systemPrompt: "You are a fantasy guide who helps users create fictional worlds, characters, and stories. You're imaginative, creative, and helpful. You ask thoughtful questions to help users develop their ideas and provide suggestions when they're stuck."
  }
};

const ChatbotDetails = () => {
  const { id = "" } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [isEditingPrompt, setIsEditingPrompt] = useState(false);
  const [systemPrompt, setSystemPrompt] = useState("");
  const [testPrompt, setTestPrompt] = useState("");
  const [testResponse, setTestResponse] = useState<string | null>(null);
  const [isTestingPrompt, setIsTestingPrompt] = useState(false);
  
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);
  
  // Check if chatbot exists
  const chatbotDetails = mockChatbotDetails[id as keyof typeof mockChatbotDetails];
  
  useEffect(() => {
    if (chatbotDetails) {
      setSystemPrompt(chatbotDetails.systemPrompt);
    }
  }, [chatbotDetails]);
  
  if (!chatbotDetails) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Chatbot Not Found</h1>
          <button 
            onClick={() => navigate("/my-chatbots")}
            className="bg-white text-black font-medium px-5 py-2 rounded-lg flex items-center gap-2 mx-auto"
          >
            Back to My Chatbots
          </button>
        </div>
      </div>
    );
  }
  
  const handleSavePrompt = () => {
    if (!systemPrompt.trim()) {
      toast.error("System prompt cannot be empty");
      return;
    }
    
    toast.success("System prompt updated successfully");
    setIsEditingPrompt(false);
    
    // In a real application, you would save this to your backend
    console.log("Updated system prompt:", systemPrompt);
  };
  
  const handleTestPrompt = () => {
    if (!testPrompt.trim()) {
      toast.error("Please enter a test message");
      return;
    }
    
    setIsTestingPrompt(true);
    
    // Simulate AI response
    setTimeout(() => {
      setTestResponse("This is a simulated response based on your prompt. In a real application, this would be generated by an AI model using your system prompt.");
      setIsTestingPrompt(false);
    }, 1500);
  };
  
  return (
    <div className="pb-20 min-h-screen animate-fade-in">
      <header className="p-4 flex items-center gap-4 sticky top-0 z-10 bg-background/80 backdrop-blur-md">
        <button 
          onClick={() => navigate("/my-chatbots")}
          className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-white/10"
        >
          <ArrowLeft size={20} />
        </button>
        <h1 className="text-xl font-semibold">Chatbot Analytics</h1>
      </header>
      
      <main className="px-4 py-2">
        <ChatbotAnalytics 
          {...chatbotDetails}
          chartData={generateChartData(30, 20, 60)}
        />
        
        {/* System Prompt Editor */}
        <div className="mt-8 glass p-6 rounded-xl">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <MessageSquare size={20} className="mr-2 text-token-purple" />
              <h3 className="text-lg font-medium">System Prompt</h3>
            </div>
            
            {!isEditingPrompt ? (
              <Button 
                onClick={() => setIsEditingPrompt(true)}
                variant="outline"
                size="sm"
                className="flex items-center gap-1"
              >
                <Edit size={16} />
                Edit Prompt
              </Button>
            ) : (
              <Button 
                onClick={handleSavePrompt}
                variant="default"
                size="sm"
                className="bg-token-purple hover:bg-token-purple/90 flex items-center gap-1"
              >
                <Save size={16} />
                Save Changes
              </Button>
            )}
          </div>
          
          {!isEditingPrompt ? (
            <div className="bg-white/5 rounded-lg p-4 border border-white/10">
              <p className="whitespace-pre-wrap">{systemPrompt}</p>
            </div>
          ) : (
            <div className="space-y-4">
              <Textarea
                value={systemPrompt}
                onChange={(e) => setSystemPrompt(e.target.value)}
                placeholder="Enter your system prompt..."
                className="min-h-[150px] bg-white/5 border border-white/10"
              />
              
              <div className="p-4 bg-token-purple/10 border border-token-purple/20 rounded-lg">
                <h4 className="font-medium text-token-purple flex items-center mb-2">
                  <Users size={16} className="mr-1" />
                  Test Your Updated Prompt
                </h4>
                
                <p className="text-sm text-muted-foreground mb-3">
                  Try sending a message to see how your chatbot would respond with the new prompt.
                </p>
                
                <div className="flex gap-2 mb-3">
                  <Input
                    value={testPrompt}
                    onChange={(e) => setTestPrompt(e.target.value)}
                    placeholder="Enter a test message..."
                    className="flex-1"
                  />
                  <Button 
                    onClick={handleTestPrompt}
                    disabled={isTestingPrompt}
                    className="bg-token-purple"
                  >
                    {isTestingPrompt ? 'Testing...' : 'Test'}
                    <Send size={16} className="ml-1" />
                  </Button>
                </div>
                
                {testResponse && (
                  <div className="bg-white/5 rounded-lg p-3 border border-white/10">
                    <p className="text-sm mb-1 text-muted-foreground">Response:</p>
                    <p>{testResponse}</p>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
        
        {/* Sell Chatbot Button */}
        <div className="mt-8 flex justify-center">
          <Button 
            variant="outline" 
            className="border-red-500 text-red-500 hover:bg-red-500/10 py-6 px-8"
            onClick={() => toast.info("This feature is coming soon!")}
          >
            Put Chatbot For Sale
          </Button>
        </div>
      </main>
    </div>
  );
};

export default ChatbotDetails;
